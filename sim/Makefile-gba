PATH := $(DEVKITARM)/bin:$(DEVKITPRO)/tools/bin:$(PATH)
include $(DEVKITARM)/gba_rules

CC			:= arm-none-eabi-g++
GRIT		:= grit

INCLUDE	:= -I../include
LIBS		:=
LIBPATHS	:=

SPECS	:= -specs=gba_mb.specs
ARCH	:= -mthumb-interwork -mthumb
RARCH	:= -mthumb-interwork -mthumb
IARCH	:= -mthumb-interwork -marm -mlong-calls

ASFLAGS	:= -mthumb-interwork
CPPFLAGS:= $(INCLUDE) -std=c++17 -mcpu=arm7tdmi -mtune=arm7tdmi -O0 -Wall -ffast-math -fconcepts -fno-strict-aliasing -fno-exceptions -fno-non-call-exceptions -fno-rtti -Winvalid-pch
LDFLAGS	:= $(ARCH) $(SPECS) $(LIBPATHS) $(LIBS) -Wl,-Map,$(PROJ).map

ROMNAME	:= cpp

all: $(ROMNAME).gba

# compile the code object files
SRC_HEADERS :=

gba.o : gba.cpp $(SRC_HEADERS)
	$(CC) $(CPPFLAGS) $(RARCH) -c $< -o $@

CODE_OBJS := gba.o

# link objects into an elf
$(ROMNAME).elf : $(CODE_OBJS)
	$(CC) $(CODE_OBJS) $(LDFLAGS) -o $(ROMNAME).elf

# objcopy and fix the rom
$(ROMNAME).gba : $(ROMNAME).elf
	arm-none-eabi-objcopy -v -O binary $(ROMNAME).elf $(ROMNAME).gba
	gbafix $(ROMNAME).gba -t$(ROMNAME)

clean :
	@rm -fv *.gba *.elf *.sav
	@rm -fv *.o
	@rm -fv .map
